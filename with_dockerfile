#!/usr/bin/env bash

set -eu -o pipefail

help() {
  cat << 'HELP'
Usage: with_dockerfile [--verbose] [--build-path DIR] [--dockerfile FILE]
                       [--image-name NAME] [--run-opts OPTIONS] [--task-id ID]
                       [--artifact PATH]... [--artifacts-save-path PATH]
                       [--remove-image-on-exit]
                       COMMAND

Run command on container using Dockerfile

  --verbose               Output log to stderr
  --build-path            Docker build path (default: current directory)
  --dockerfile            Dockerfile path (default: <docker build path>/Dockerfile)
  --image-name            Docker image name (default: <current directory name>:latest)
  --run-opts              Docker run options (e.g., "--volume data:/data --publish 80:80")
  --task-id               Unique ID to name container and work volume
                          (default: generated random string)
  --artifact              Artifact that will be copied from docker volume to
                          host directory on exit
  --artifacts-save-path   Host directory that artifacts will be copied
                          (default: <current directory>/artifacts)
  --remove-image-on-exit  Remove docker image on exit
HELP
}

artifacts=()

while test "$#" -gt 0; do
  case "$1" in
    --help                 ) help; exit 0 ;;
    --verbose              ) verbose="yes"; shift ;;
    --build-path           ) build_path=$2; shift 2 ;;
    --dockerfile           ) dockerfile=$2; shift 2 ;;
    --image-name           ) image_name=$2; shift 2 ;;
    --run-opts             ) IFS=" " read -r -a run_opts <<< "$2"; shift 2 ;;
    --task-id              ) task_id=$2; shift 2 ;;
    --artifact             ) artifacts=("${artifacts[@]}" "$2"); shift 2 ;;
    --artifacts-save-path  ) artifacts_save_path=$2; shift 2 ;;
    --remove-image-on-exit ) remove_image_on_exit="yes"; shift ;;
    --*                    ) echo "error: unknown option $1"; exit 1 ;;
    * ) break ;;
  esac
done

: "${verbose:="no"}"
: "${build_path:="$(pwd)"}"
: "${dockerfile:="$build_path/Dockerfile"}"
: "${image_name:="$(basename "$build_path"):latest"}"
: "${run_opts:=}"
: "${task_id:="$(env LC_CTYPE=C tr -dc '[:alnum:]' < /dev/urandom 2> /dev/null | head -c 10 || true)"}"
: "${artifacts_save_path:="$(pwd)/artifacts/$task_id"}"
: "${remove_image_on_exit:="no"}"

if test "$#" -eq 0; then
  help >&2
  exit 1
fi

repository=$(echo "$image_name" | cut -d ':' -f 1)
container_name=$repository.$task_id
workdir=$(pwd)
host_workdir_mount_path=/host$workdir
work_volume=$repository.work.$task_id

if test "$verbose" = "no"; then
  exec {stderr}>&2
  exec 2> /dev/null
fi
exec {stdout}>&1
exec 1>&2

log() {
  now="$(date "+%Y-%m-%d %H:%M:%S")"
  echo -e "$now" "$@"
}

on_exit() {
  local exit_status="$?"

  if test "$verbose" = "no"; then
    exec 2> /dev/null
  fi
  exec 1>&2

  # copy artifacts to host directory
  if test "${#artifacts[@]}" -gt 0; then
    log "copy artifacts from docker volume to host directory ${artifacts[*]} -> $artifacts_save_path"
    mkdir -p "$artifacts_save_path"
    docker run --rm -w "$workdir" -v "$work_volume:$workdir" "$image_name" tar -cf - "${artifacts[@]}" \
      | tar -C "$artifacts_save_path" -xf -
  fi
  # remove work volume
  if docker volume inspect "$work_volume" &> /dev/null; then
    log "remove work volume $work_volume"
    docker volume rm "$work_volume"
  fi
  # remove image
  if test "$remove_image_on_exit" = "yes" \
    && docker image inspect "$image_name" &> /dev/null; then
    log "remove image $image_name"
    docker image rm "$image_name"
  fi
  return "$exit_status"
}

trap 'on_exit' EXIT

log "build docker image $image_name"
if ! docker build --file "$dockerfile" --tag "$image_name" "$build_path" < /dev/null; then
  log "error: failed to build image"
  exit 1
fi

if docker volume inspect "$work_volume" &> /dev/null; then
  log "remove work volume $work_volume"
  docker volume rm "$work_volume"
fi

log "copy $workdir to docker volume $work_volume"
copy_workdir_to_volume_cmd="tar -C $host_workdir_mount_path -cf - \$(cd $host_workdir_mount_path && find . ! -path . -maxdepth 1) | tar -C $workdir -xf -"
if ! docker run --rm --name "$container_name" \
  --volume "$workdir:$host_workdir_mount_path:ro" \
  --volume "$work_volume:$workdir" \
  "$image_name" \
  sh -c "$copy_workdir_to_volume_cmd"; then
  log "error: failed to setup work volume"
  exit 1
fi

log "run (" "$@" ") on container $container_name"

# restore stdout, stderr
if test "$verbose" = "no"; then
  exec 2>&${stderr} {stderr}>&-
fi
exec 1>&${stdout} {stdout}>&-

# shellcheck disable=SC2068
docker run --rm --interactive --name "$container_name" --workdir "$workdir" \
  --volume "$work_volume:$workdir" \
  ${run_opts[@]} \
  "$image_name" \
  "$@"
